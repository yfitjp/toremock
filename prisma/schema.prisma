// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  purchases     Purchase[]
  accounts      Account[]
  sessions      Session[]
  examResults   ExamResult[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Exam {
  id          String    @id @default(cuid())
  title       String
  description String
  price       Int
  duration    Int
  questions   Int
  type        String    // "TOEIC" | "TOEFL" | "IELTS"
  difficulty  String?   // "初級" | "中級" | "上級"
  isFree      Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  purchases   Purchase[]
  examResults ExamResult[]
}

model Purchase {
  id        String   @id @default(cuid())
  userId    String
  examId    String
  status    String   // "pending" | "completed" | "cancelled"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  exam      Exam     @relation(fields: [examId], references: [id])
}

model ExamResult {
  id            String   @id @default(cuid())
  userId        String
  examId        String
  score         Int
  correctAnswers Int
  totalQuestions Int
  timeSpent     Int      // 分単位
  completedAt   DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id])
  exam          Exam     @relation(fields: [examId], references: [id])
}
